# Use API
?config
install.packages("jsonlite")
library(jsonlite)
install.packages("httpuv")
library(httpuv)
install.packages("httr")
library(httr)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
oauth_endpoints("github")
# Change based on what you
myapp <- oauth_app(appname = "Access",
key = "9a8a24172a1e568def5a",
secret = "fd35fadf067cf3046be9a84cef4de4a05b81d1d8")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
?config
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "cartyad/datasharing", "created_at"]
# The code above was sourced from Michael Galarnyk's blog, found at:
# The code above was sourced from Michael Galarnyk's blog, found at:
# https://towardsdatascience.com/accessing-data-from-github-api-using-r-3633fb62cb08
# Use API
?config
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/cartyad/repos", gtoken)
# Extract content from a request
json1 = content(req)
# Convert to a data.frame
gitDF = jsonlite::fromJSON(jsonlite::toJSON(json1))
# Subset data.frame
gitDF[gitDF$full_name == "cartyad/datasharing", "created_at"]
# The code above was sourced from Michael Galarnyk's blog, found at:
# The code above was sourced from Michael Galarnyk's blog, found at:
# https://towardsdatascience.com/accessing-data-from-github-api-using-r-3633fb62cb08
myData = fromJSON("https://api.github.com/users/cartyad")
myData$followers
#This extracts the public repositories which I have attached to my GitHub account from the myData variable
myData$public_repos
#Gives of the names of my public repositories, details of the dates the repositories were created and names of repositiories
repos = fromJSON("https://api.github.com/users/cartyad/repos")
repos$name
repos$created_at
repos$full_name
#Extracts and displays the data regarding my LowestCommonAncestor project
LCARepos <- fromJSON("https://api.github.com/repos/cartyad/LowestCommonAncestor/commits")
LCARepos$commit$message
#Interrogate the Github API to extract data from another account by switching the username, num followers, num following, num repositories
femurrayData = fromJSON("https://api.github.com/users/femurray")
femurrayiData$followers
femurrayiData$following
femurrayiData$public_repos
femurrayiData$bio
#Interrogate the Github API to extract data from another account by switching the username, num followers, num following, num repositories
femurrayData = fromJSON("https://api.github.com/users/femurray")
femurrayData$followers
femurrayData$following
femurrayData$public_repos
femurrayData$bio
myData = GET("https://api.github.com/users/andrew/followers?per_page=100;", gtoken)
stop_for_status(myData)
extract = content(myData)
githubDB = jsonlite::fromJSON(jsonlite::toJSON(extract))
githubDB$login
#Extract the usernames of the followers
id = githubDB$login
user_ids = c(id)
#Create and instantiate a new vector named users which is empty and a dataframe called usersDB which is also empty.
users = c()
usersDB = data.frame(
username = integer(),
following = integer(),
followers = integer(),
repos = integer(),
dateCreated = integer()
)
#Create and instantiate a new vector named users which is empty and a dataframe called usersDB which is also empty.
users = c()
myData = GET("https://api.github.com/users/andrew/followers?per_page=100;", gtoken)
stop_for_status(myData)
extract = content(myData)
githubDB = jsonlite::fromJSON(jsonlite::toJSON(extract))
githubDB$login
#Extract the usernames of the followers
id = githubDB$login
user_ids = c(id)
#Create and instantiate a new vector named users which is empty and a dataframe called usersDB which is also empty.
users = c()
usersDB = data.frame(
username = integer(),
following = integer(),
followers = integer(),
repos = integer(),
dateCreated = integer())
#Create and execution of a for loop which adds users to the list
for(i in 1:length(user_ids))
{
followingURL = paste("https://api.github.com/users/", user_ids[i], "/following", sep = "")
followingRequest = GET(followingURL, gtoken)
followingContent = content(followingRequest)
#This If statement determines if a user has no followers, it skips over to the next
if(length(followingContent) == 0)
{
next
}
followingDF = jsonlite::fromJSON(jsonlite::toJSON(followingContent))
followingLogin = followingDF$login
#Execute a loop to iterate through the following users to the account
for (j in 1:length(followingLogin))
{
#If statement to ensure the list does not contain duplicate values and adds those to the list
if (is.element(followingLogin[j], users) == FALSE)
{
users[length(users) + 1] = followingLogin[j]
#Extract data on each user
followingUrl2 = paste("https://api.github.com/users/", followingLogin[j], sep = "")
following2 = GET(followingUrl2, gtoken)
followingContent2 = content(following2)
followingDF2 = jsonlite::fromJSON(jsonlite::toJSON(followingContent2))
#Retrieve data on who each of these users follow
followingNumber = followingDF2$following
#Extract infora=mation and data on the users which this given user follows
followersNumber = followingDF2$followers
#Retrieve each user's number of repositories
reposNumber = followingDF2$public_repos
#Extract the data on the year in which the user joined and created their account
yearCreated = substr(followingDF2$created_at, start = 1, stop = 4)
#Add this user's data to the aforementioned dataframe usersDB
usersDB[nrow(usersDB) + 1, ] = c(followingLogin[j], followingNumber, followersNumber, reposNumber, yearCreated)
}
next
}
#If statement which ends once the number of users exceeds 100
if(length(users) > 100)
{
break
}
next
}
usersDB
Sys.setenv("plotly_username"="cartyad")
Sys.setenv("plotly_api_key"="LIZIJHuZ3vUpowXGoCMj")
# plot repositories v followers coloured by year
plot1 = plot_ly(data = usersDB, x = ~repos, y = ~followers,
text = ~paste("Followers: ", followers, "<br>Repositories: ",
repos, "<br>Date Created:", dateCreated), color = ~dateCreated)
plot1
install.packages("plotly")
#install.packages("plotly")
library(plotly)
require(devtools)
install.packages("devtools")
install.packages("devtools")
require(devtools)
myData = GET("https://api.github.com/users/andrew/followers?per_page=100;", gtoken)
#install.packages("jsonlite")
library(jsonlite)
#install.packages("httpuv")
library(httpuv)
#install.packages("httr")
library(httr)
#install.packages("plotly")
library(plotly)
#install.packages("devtools")
require(devtools)
myData = GET("https://api.github.com/users/andrew/followers?per_page=100;", gtoken)
stop_for_status(myData)
extract = content(myData)
githubDB = jsonlite::fromJSON(jsonlite::toJSON(extract))
githubDB$login
#Extract the usernames of the followers
id = githubDB$login
user_ids = c(id)
#Create and instantiate a new vector named users which is empty and a dataframe called usersDB which is also empty.
users = c()
usersDB = data.frame(
username = integer(),
following = integer(),
followers = integer(),
repos = integer(),
dateCreated = integer())
#Create and execution of a for loop which adds users to the list
for(i in 1:length(user_ids))
{
followingURL = paste("https://api.github.com/users/", user_ids[i], "/following", sep = "")
followingRequest = GET(followingURL, gtoken)
followingContent = content(followingRequest)
#This If statement determines if a user has no followers, it skips over to the next
if(length(followingContent) == 0)
{
next
}
followingDF = jsonlite::fromJSON(jsonlite::toJSON(followingContent))
followingLogin = followingDF$login
#Execute a loop to iterate through the following users to the account
for (j in 1:length(followingLogin))
{
#If statement to ensure the list does not contain duplicate values and adds those to the list
if (is.element(followingLogin[j], users) == FALSE)
{
users[length(users) + 1] = followingLogin[j]
#Extract data on each user
followingUrl2 = paste("https://api.github.com/users/", followingLogin[j], sep = "")
following2 = GET(followingUrl2, gtoken)
followingContent2 = content(following2)
followingDF2 = jsonlite::fromJSON(jsonlite::toJSON(followingContent2))
#Retrieve data on who each of these users follow
followingNumber = followingDF2$following
#Extract infora=mation and data on the users which this given user follows
followersNumber = followingDF2$followers
#Retrieve each user's number of repositories
reposNumber = followingDF2$public_repos
#Extract the data on the year in which the user joined and created their account
yearCreated = substr(followingDF2$created_at, start = 1, stop = 4)
#Add this user's data to the aforementioned dataframe usersDB
usersDB[nrow(usersDB) + 1, ] = c(followingLogin[j], followingNumber, followersNumber, reposNumber, yearCreated)
}
next
}
#If statement which ends once the number of users exceeds 100
if(length(users) > 100)
{
break
}
next
}
Sys.setenv("plotly_username"="cartyad")
Sys.setenv("plotly_api_key"="LIZIJHuZ3vUpowXGoCMj")
# plot repositories v followers coloured by year
plot1 = plot_ly(data = usersDB, x = ~repos, y = ~followers,
text = ~paste("Followers: ", followers, "<br>Repositories: ",
repos, "<br>Date Created:", dateCreated), color = ~dateCreated)
plot1
#send to plotly
api_create(plot1, filename = "Repositories vs Followers")
#plot 2
#following vs followers categorised by year
plot2 = plot_ly(data = usersDB, x = ~following, y = ~followers, text = ~paste("Followers: ", followers, "<br>Following: ", following), color = ~dateCreated)
plot2
api_create(plot2, filename = "Following vs Followers")
api_create(plot2, filename = "Following vs Followers")
#Now ascertaining data on 10 most popular languages of the 100 users populating the usersDB dataframe
languages = c()
for (i in 1:length(users))
{
RepositoriesUrl = paste("https://api.github.com/users/", users[i], "/repos", sep = "")
Repositories = GET(RepositoriesUrl, gtoken)
RepositoriesContent = content(Repositories)
RepositoriesDF = jsonlite::fromJSON(jsonlite::toJSON(RepositoriesContent))
RepositoriesNames = RepositoriesDF$name
for (j in 1: length(RepositoriesNames))
{
RepositoriesUrl2 = paste("https://api.github.com/repos/", users[i], "/", RepositoriesNames[j], sep = "")
Repositories2 = GET(RepositoriesUrl2, gtoken)
RepositoriesContent2 = content(Repositories2)
RepositoriesDF2 = jsonlite::fromJSON(jsonlite::toJSON(RepositoriesContent2))
language = RepositoriesDF2$language
if (length(language) != 0 && language != "<NA>")
{
languages[length(languages)+1] = language
}
next
}
next
}
#Adds the previously ascertained 10 most popular languages to a table top10Languages
allLanguages = sort(table(languages), increasing=TRUE)
top10Languages = allLanguages[(length(allLanguages)-9):length(allLanguages)]
#converts the table top10Languages into a dataframe
languageDF = as.data.frame(top10Languages)
#Plot 3 Top 10 Languages
plot3 = plot_ly(data = languageDF, x = languageDF$languages, y = languageDF$Freq, type = "bar")
plot3
#Now ascertaining data on 10 most popular languages of the 100 users populating the usersDB dataframe
languages = c()
for (i in 1:length(users))
{
RepositoriesUrl = paste("https://api.github.com/users/", users[i], "/repos", sep = "")
Repositories = GET(RepositoriesUrl, gtoken)
RepositoriesContent = content(Repositories)
RepositoriesDF = jsonlite::fromJSON(jsonlite::toJSON(RepositoriesContent))
RepositoriesNames = RepositoriesDF$name
for (j in 1: length(RepositoriesNames))
{
RepositoriesUrl2 = paste("https://api.github.com/repos/", users[i], "/", RepositoriesNames[j], sep = "")
Repositories2 = GET(RepositoriesUrl2, gtoken)
RepositoriesContent2 = content(Repositories2)
RepositoriesDF2 = jsonlite::fromJSON(jsonlite::toJSON(RepositoriesContent2))
language = RepositoriesDF2$language
if (length(language) != 0 && language != "<NA>")
{
languages[length(languages)+1] = language
}
next
}
next
}
#Adds the previously ascertained 10 most popular languages to a table top10Languages
allLanguages = sort(table(languages), increasing=TRUE)
top10Languages = allLanguages[(length(allLanguages)-9):length(allLanguages)]
#converts the table top10Languages into a dataframe
languageDF = as.data.frame(top10Languages)
#Plot 3 Top 10 Languages
plot3 = plot_ly(data = languageDF, x = languageDF$languages, y = languageDF$Freq, type = "bar")
plot3
#Now ascertaining data on 10 most popular languages of the 100 users populating the usersDB dataframe
languages = c()
for (i in 1:length(users))
{
RepositoriesUrl = paste("https://api.github.com/users/", users[i], "/repos", sep = "")
Repositories = GET(RepositoriesUrl, gtoken)
RepositoriesContent = content(Repositories)
RepositoriesDF = jsonlite::fromJSON(jsonlite::toJSON(RepositoriesContent))
RepositoriesNames = RepositoriesDF$name
for (j in 1: length(RepositoriesNames))
{
RepositoriesUrl2 = paste("https://api.github.com/repos/", users[i], "/", RepositoriesNames[j], sep = "")
Repositories2 = GET(RepositoriesUrl2, gtoken)
RepositoriesContent2 = content(Repositories2)
RepositoriesDF2 = jsonlite::fromJSON(jsonlite::toJSON(RepositoriesContent2))
language = RepositoriesDF2$language
if (length(language) != 0 && language != "<NA>")
{
languages[length(languages)+1] = language
}
next
}
next
}
#Adds the previously ascertained 10 most popular languages to a table top10Languages
allLanguages = sort(table(languages), increasing=TRUE)
top10Languages = allLanguages[(length(allLanguages)-9):length(allLanguages)]
#converts the table top10Languages into a dataframe
languageDF = as.data.frame(top10Languages)
#Plot 3 Top 10 Languages
plot3 = plot_ly(data = languageDF, x = languageDF$languages, y = languageDF$Freq, type = "bar")
plot3
api_create(plot3, filename = "10 Most Popular Languages")
